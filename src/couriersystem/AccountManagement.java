package couriersystem;


import couriersystem.model.Account;
import couriersystem.model.DeliveryStaff;
import couriersystem.model.GlobalConfig;
import couriersystem.model.LoggedInUser;
import couriersystem.model.ManagingStaff;
import couriersystem.model.Order;
import java.awt.event.KeyEvent;
import java.io.*;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author swee.kee
 */
public class AccountManagement extends javax.swing.JFrame {


    private String keyId;
    private ArrayList<JTextField> textFields;
    private ArrayList<Account> listOfAccounts;
    private String roleType;

    /**
     * Creates new form AddStudentForm
     */
    public AccountManagement() {
        initComponents();
        //Validation: Check permission
        if (!LoggedInUser.getInstance().getPermission().allowAccountManagement()) {
            this.dispose();
        }
        setTitle("Account Management");
        setVisible(true);
        showList();
        clearFields();
        
        //need this array for validation if it is empty
        textFields = new ArrayList<JTextField>();
        textFields.add(txtUsername);
    }
     
    public void showList (){
        listOfAccounts = Account.getListOfAccounts();
        if (!LoggedInUser.getInstance().getRole().equals("Admin")){
            listOfAccounts.remove(0);
        }
        DefaultTableModel model =  (DefaultTableModel)accountTable.getModel();
        model.setRowCount(0);
        String[] rowValues = new String[4];
        for (int i = 0; i < listOfAccounts.size(); i++){
            rowValues[0] = listOfAccounts.get(i).getId();
            rowValues[1] = listOfAccounts.get(i).getUsername();
            rowValues[2] = listOfAccounts.get(i).getRole();
            rowValues[3] = listOfAccounts.get(i).isActive() ? "Active" : "Inactive";
            model.addRow(rowValues);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        roleGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtSearchField = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        accountTable = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        rbManaging = new javax.swing.JRadioButton();
        rbDelivery = new javax.swing.JRadioButton();
        txtUsername = new javax.swing.JTextField();
        lblID = new javax.swing.JLabel();
        chkView = new javax.swing.JCheckBox();
        txtPassword = new javax.swing.JPasswordField();
        btnBack = new javax.swing.JButton();
        btnCreate = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnActivation = new javax.swing.JButton();
        btnViewDetails = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        title1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));

        jLabel9.setFont(new java.awt.Font("Century Gothic", 1, 20)); // NOI18N
        jLabel9.setText("Account Management");

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Account.png"))); // NOI18N
        jLabel3.setMaximumSize(new java.awt.Dimension(60, 60));
        jLabel3.setMinimumSize(new java.awt.Dimension(60, 60));
        jLabel3.setPreferredSize(new java.awt.Dimension(60, 60));

        txtSearchField.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        txtSearchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchFieldKeyReleased(evt);
            }
        });

        accountTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Username", "Role", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        accountTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                accountTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(accountTable);

        title.setFont(new java.awt.Font("Century Gothic", 1, 20)); // NOI18N
        title.setText("Account Information");

        jLabel4.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel4.setText("ID");

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel1.setText("Username");

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel2.setText("Password");

        jLabel14.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel14.setText("Role");

        roleGroup.add(rbManaging);
        rbManaging.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        rbManaging.setText("Managing Staff");
        rbManaging.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbManagingActionPerformed(evt);
            }
        });

        roleGroup.add(rbDelivery);
        rbDelivery.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        rbDelivery.setText("Delivery Staff");

        txtUsername.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        txtUsername.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtUsernameKeyReleased(evt);
            }
        });

        lblID.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblID.setText("---");

        chkView.setFont(new java.awt.Font("Century Gothic", 0, 10)); // NOI18N
        chkView.setText("View");
        chkView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkViewActionPerformed(evt);
            }
        });

        txtPassword.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N

        btnBack.setBackground(new java.awt.Color(204, 204, 204));
        btnBack.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnCreate.setBackground(new java.awt.Color(204, 255, 204));
        btnCreate.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnCreate.setText("Create Account");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(204, 255, 255));
        btnUpdate.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnActivation.setBackground(new java.awt.Color(255, 204, 204));
        btnActivation.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnActivation.setText("Deactivate Account");
        btnActivation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActivationActionPerformed(evt);
            }
        });

        btnViewDetails.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnViewDetails.setText("View More Details");
        btnViewDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDetailsActionPerformed(evt);
            }
        });

        btnClear.setBackground(new java.awt.Color(255, 255, 204));
        btnClear.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel5.setText("Status");

        lblStatus.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblStatus.setText("---");

        lblName.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblName.setText("Name");

        lblEmail.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblEmail.setText("Email");

        txtName.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        txtName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNameKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNameKeyTyped(evt);
            }
        });

        txtEmail.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        txtEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEmailKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(title)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnViewDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel2)
                                            .addComponent(lblName)
                                            .addComponent(lblEmail)
                                            .addComponent(jLabel14)
                                            .addComponent(jLabel5))
                                        .addGap(95, 95, 95)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtUsername)
                                            .addComponent(txtName)
                                            .addComponent(txtEmail)
                                            .addComponent(txtPassword)
                                            .addGroup(jPanel4Layout.createSequentialGroup()
                                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                                        .addComponent(rbManaging)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(rbDelivery))
                                                    .addComponent(lblStatus)
                                                    .addComponent(lblID))
                                                .addGap(0, 0, Short.MAX_VALUE))))))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnClear)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnActivation)
                                .addGap(2, 2, 2)))
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(chkView)))
                        .addContainerGap())))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(title)
                    .addComponent(btnViewDetails))
                .addGap(19, 19, 19)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lblID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkView))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmail)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbDelivery)
                            .addComponent(rbManaging))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblStatus)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnCreate)
                    .addComponent(btnUpdate)
                    .addComponent(btnActivation)
                    .addComponent(btnClear))
                .addContainerGap())
        );

        title1.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        title1.setText("Search");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(title1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 761, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(14, 14, 14))
            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel9))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(title1))
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private boolean validateForm(){
        //1. Empty Text field Validation
        //run a for loop over each text field and check if one of they is blank
        for (JTextField textfield : textFields) { 
            if (textfield.getText().isBlank()) {
                textfield.requestFocus();
                JOptionPane.showMessageDialog(rootPane, "Please ensure that all fields are entered.");
                return false;
            }
        }
        //2. validate package type
        if (rbManaging.isSelected() && !rbDelivery.isSelected())
            roleType = "Managing Staff";
        else if (!rbManaging.isSelected() && rbDelivery.isSelected())
            roleType = "Delivery Staff";
        else {
            rbManaging.requestFocus();
            JOptionPane.showMessageDialog(rootPane, "Please choose a role.");
            return false;
        }
        
        //3. validate password
        if (new String(txtPassword.getPassword()).length() < 8){
            JOptionPane.showMessageDialog(rootPane, "Password has to be at least 8 characters.");
            return false;
        }
        
        
        return true;
    }
    
    private Account setupAccount(String id, boolean isActive ){
        Account acc = new Account(
                id, 
                txtUsername.getText(),
                new String(txtPassword.getPassword()),
                roleType == null ? "Managing Staff" : roleType, //Default value
                isActive
        );
        return acc;
    }
    
    private void txtSearchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchFieldKeyReleased
        try{

            String[] columnNames = {"ID","Username","Role","Status"};
            DefaultTableModel model = (DefaultTableModel)accountTable.getModel();
            model.setRowCount(0);
            accountTable.revalidate();
            model.setColumnIdentifiers(columnNames);
            String keyword = txtSearchField.getText();
            
            String[] rowValues = new String[4];
            for (int i = 0; i < listOfAccounts.size(); i++){
                rowValues[0] = listOfAccounts.get(i).getId();
                rowValues[1] = listOfAccounts.get(i).getUsername();
                rowValues[2] = listOfAccounts.get(i).getRole();
                rowValues[3] = listOfAccounts.get(i).isActive() ? "Active" : "Inactive";
                for (String value : rowValues) {
                    if (value.contains(keyword)) {
                        model.addRow(rowValues);
                        break;
                    }
                }
            }
        }catch(Exception ex){
            JOptionPane.showMessageDialog(rootPane, ex.toString());
        }
    }//GEN-LAST:event_txtSearchFieldKeyReleased

    private void accountTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_accountTableMouseClicked
        //when click on a record in the table
        clearFields();
        title.setText("Account Information");

        int i = accountTable.getSelectedRow();
        TableModel model = accountTable.getModel();
        keyId = model.getValueAt(i,0).toString();
        lblID.setText(model.getValueAt(i,0).toString());
        txtUsername.setText(model.getValueAt(i,1).toString());
        try{
            File myFile = new File(GlobalConfig.dbPath + "Account.txt");
            Scanner sc = new Scanner(myFile);
            String temp;
            while(sc.hasNext()){
                temp = sc.nextLine();
                String []tempArr = temp.split(",");
                if (tempArr[0].equals(keyId)){
                    txtPassword.setText(tempArr[2]);
                    txtPassword.setEchoChar('\u25cf');//back to default mask
                }
            }
            sc.close();
        } catch(Exception ex){
            JOptionPane.showMessageDialog(rootPane, ex.toString());
        }
        txtPassword.setEditable(true);
        chkView.setVisible(true);
        rbManaging.setEnabled(false);
        rbDelivery.setEnabled(false);
        txtName.setVisible(false);
        txtEmail.setVisible(false);
        lblName.setVisible(false);
        lblEmail.setVisible(false);

        if (model.getValueAt(i,2).toString().equals("Managing Staff"))
            rbManaging.setSelected(true);
        else if (model.getValueAt(i,2).toString().equals("Delivery Staff"))
            rbDelivery.setSelected(true);
        lblStatus.setText(model.getValueAt(i,3).toString());
        
        btnClear.setText("Create New Account");
        btnCreate.setVisible(false);
        btnActivation.setVisible(true);
        btnViewDetails.setVisible(true);

        if (model.getValueAt(i,3).toString().equals("Active")) {
            btnUpdate.setVisible(true);
            btnActivation.setText("Deactivate Account");
            for (JTextField textfield : textFields) {
                textfield.setEditable(true);
            }
        } else if (model.getValueAt(i,3).toString().equals("Inactive")){
            btnUpdate.setVisible(false);
            btnActivation.setText("Activate Account");
            for (JTextField textfield : textFields) {
                textfield.setEditable(false);
            }
        }
        
        if (LoggedInUser.getInstance().getUserId().equals(keyId) ){
            btnActivation.setVisible(false);
        } else {
            btnActivation.setVisible(true);
        }
        
        
    }//GEN-LAST:event_accountTableMouseClicked

    private void rbManagingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbManagingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbManagingActionPerformed

    private void txtUsernameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUsernameKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUsernameKeyReleased

    private void chkViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkViewActionPerformed
        // TODO add your handling code here:
        if (chkView.isSelected()){
            txtPassword.setEchoChar((char)0);//unmask password
        }
        else{
            txtPassword.setEchoChar('\u25cf');//back to default mask
        }
    }//GEN-LAST:event_chkViewActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clearFields();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        if (validateForm() == false)
            return;
        
        //1. validate name field
        if (txtName.getText().isBlank() || txtEmail.getText().isBlank()) {
            JOptionPane.showMessageDialog(rootPane, "Please ensure that all fields are entered.");
            return;
        }
        
        //2. validate email
        if (!txtEmail.getText().contains("@")){
            JOptionPane.showMessageDialog(rootPane, "Please enter a valid email address.");
            return;
        }
        
        // check if same username found
        try{
            File myFile = new File(GlobalConfig.dbPath + "Account.txt");
            Scanner sc = new Scanner(myFile);
            String temp;
            while(sc.hasNext()){
                temp = sc.nextLine();
                String []tempArr = temp.split(",");
                if (tempArr[1].equals(txtUsername.getText())){
                    JOptionPane.showMessageDialog(rootPane, "This username is taken, please enter another username");
                    return;
                }
            }
            sc.close();
        }
        catch(FileNotFoundException | NumberFormatException ex){
            JOptionPane.showMessageDialog(rootPane,ex.toString()); 
            return;
        }
        
        String id = "";
        
        File curFile = new File(GlobalConfig.dbPath + "ID_Tracker.txt");
        File newFile = new File(GlobalConfig.dbPath + "temp.txt");
        String temp;
        try{
            FileWriter fw = new FileWriter(newFile, true);
            BufferedWriter bw = new BufferedWriter(fw);
            PrintWriter pw = new PrintWriter(bw);
            Scanner sc = new Scanner(curFile);

            while(sc.hasNext())
            {
               temp = sc.nextLine();
               String [] tempArr = temp.split(",");
               if (tempArr[0].equals("Account")){
                   // generate account id
                   int numberOfDigits = tempArr[1].length();
                    String generated = "";
                    for(int i = 0; i < 6 - numberOfDigits; i++)
                        generated += "0";
                    generated += tempArr[1]; 

                    //Edit the txt file
                    int currentNum = Integer.parseInt(tempArr[1]);
                    currentNum += 1;
                    pw.println("Account," + Integer.toString(currentNum));

                    //return the generated id
                    id = generated;
               } else {
                   pw.println(temp);
               }
            }
            sc.close(); //close scanner
            pw.flush(); 
            pw.close(); //close printwriter
            curFile.delete(); //delete current file
            File n = new File(GlobalConfig.dbPath + "ID_Tracker.txt");
            newFile.renameTo(n);
        }
        catch(Exception ex){
            JOptionPane.showMessageDialog(rootPane, ex.toString());
        }
        
        //Create Account
        try{
            Account account = setupAccount(id, true);
            FileWriter myFile = new FileWriter(GlobalConfig.dbPath + "Account.txt",true);
            PrintWriter pw = new PrintWriter(myFile);
            pw.println(account.toOneLineString());
            pw.close();
         }
        catch (IOException ex){
            JOptionPane.showMessageDialog(rootPane, ex.toString());
        }
        
        //Create Account
        try{
            Account account = setupAccount(id, true);
            FileWriter myFile = null;
            if (roleType.equals("Managing Staff")) {
                myFile = new FileWriter(GlobalConfig.dbPath + "ManagingStaff.txt",true);
            } else if (roleType.equals("Delivery Staff")) {
                myFile = new FileWriter(GlobalConfig.dbPath + "DeliveryStaff.txt",true);
            }
            PrintWriter pw = new PrintWriter(myFile);
            if (roleType.equals("Managing Staff")) {
                ManagingStaff managingStaff = new ManagingStaff (id, txtName.getText(), txtEmail.getText());
                pw.println(managingStaff.getId() + "," + managingStaff.getName() + ",,,," + managingStaff.getEmail() + ",,end-of-line");
            } else if (roleType.equals("Delivery Staff")) {
                DeliveryStaff deliveryStaff = new DeliveryStaff(id, txtName.getText(), txtEmail.getText());
                pw.println(deliveryStaff.getId() + "," + deliveryStaff.getName() + ",,,," + deliveryStaff.getEmail() + ",,,end-of-line");
            }
            pw.close();
            JOptionPane.showMessageDialog(rootPane, "Account with username " + txtUsername.getText() + " created (" + id + ")." , "Successful", JOptionPane.INFORMATION_MESSAGE);
            clearFields();  
            showList();
         }
        catch (IOException ex){
            JOptionPane.showMessageDialog(rootPane, ex.toString());
        }
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnActivationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActivationActionPerformed
        if (validateForm() == false)
            return;
        
        // Check if there is any assigned delivery
        ArrayList<Order> listOfOrders = Order.getListOfOrders();
        for (Order ord : listOfOrders){
            if (ord.getAssignedStaffID().equals(keyId) && lblStatus.getText().equals("Active")){
                JOptionPane.showMessageDialog(rootPane, "This user's account can't be deactivated because it is assigned to a delivery.", "Deactivation Failed", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
        }
        
        String id = keyId;
        
        boolean isActive = lblStatus.getText().equals("Active");
        
        File curFile = new File(GlobalConfig.dbPath + "Account.txt");
        File newFile = new File(GlobalConfig.dbPath + "temp.txt");
        String row;
        try{
            FileWriter fw = new FileWriter(newFile, true);
            BufferedWriter bw = new BufferedWriter(fw);
            PrintWriter pw = new PrintWriter(bw);
            Scanner sc = new Scanner(curFile);

            while(sc.hasNext())
            {
                row = sc.nextLine();
                String [] values = row.split(",");
                if(values[0].equals(id)){
                    Account acc = setupAccount(id, !isActive);
                    pw.println(acc.toOneLineString());
                } else {
                    pw.println(row);
                }
            }
            sc.close(); //close scanner
            pw.flush(); 
            pw.close(); //close printwriter
            curFile.delete(); //delete current file
            File n = new File(GlobalConfig.dbPath + "Account.txt");
            newFile.renameTo(n); //rename temp to use oldfile name
            JOptionPane.showMessageDialog(rootPane, isActive ? "Account deactivated." : "Account activated.", "Successful", JOptionPane.INFORMATION_MESSAGE);
        }
        catch(Exception ex){
             JOptionPane.showMessageDialog(rootPane, ex.toString());
        }
        clearFields();
        showList();
    }//GEN-LAST:event_btnActivationActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (validateForm() == false)
            return;
        
        String id = keyId;
        
        File curFile = new File(GlobalConfig.dbPath + "Account.txt");
        File newFile = new File(GlobalConfig.dbPath + "temp.txt");
        String row;
        try{
            FileWriter fw = new FileWriter(newFile, true);
            BufferedWriter bw = new BufferedWriter(fw);
            PrintWriter pw = new PrintWriter(bw);
            Scanner sc = new Scanner(curFile);

            while(sc.hasNext())
            {
                row = sc.nextLine();
                String [] values = row.split(",");
                if(values[0].equals(id)){
                    Account acc = setupAccount(id, lblStatus.getText() == "Active" ? true : false);
                    pw.println(acc.toOneLineString());
                } else {
                    pw.println(row);
                }
            }
            sc.close(); //close scanner
            pw.flush(); 
            pw.close(); //close printwriter
            curFile.delete(); //delete current file
            File n = new File(GlobalConfig.dbPath + "Account.txt");
            newFile.renameTo(n); //rename temp to use oldfile name
            JOptionPane.showMessageDialog(rootPane, "Account " + id + " details updated!", "Update Successful", JOptionPane.INFORMATION_MESSAGE);
        }
        catch(Exception ex){
             JOptionPane.showMessageDialog(rootPane, ex.toString());
        }
        clearFields();
        showList();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnViewDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDetailsActionPerformed
        if (validateForm() == false)
            return;
        if (roleType.equals("Managing Staff")) 
            new DisplayManagingStaffProfile(keyId, false).setVisible(true);
        else if (roleType.equals("Delivery Staff"))
            new DisplayDeliveryStaffProfile(keyId, false).setVisible(true);
    }//GEN-LAST:event_btnViewDetailsActionPerformed

    private void txtNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNameKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameKeyReleased

    private void txtEmailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmailKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmailKeyReleased

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        
    }//GEN-LAST:event_formWindowClosed

    private void txtNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNameKeyTyped
        char c = evt.getKeyChar();
        // check the key pressed by user
        if(((Character.isDigit(c))|| c == KeyEvent.VK_BACK_SPACE || c==KeyEvent.VK_DELETE )){           
            evt.consume(); // ignore the key
        }
    }//GEN-LAST:event_txtNameKeyTyped
    private void clearFields(){ 
        //clears the textfields
        lblID.setText("---");
        roleGroup.clearSelection();
        txtUsername.setText("");
        txtPassword.setVisible(true);
        chkView.setVisible(true);
        txtPassword.setText("");
        lblStatus.setText("---");
        txtPassword.setEditable(true);
        rbManaging.setEnabled(true);
        rbDelivery.setEnabled(true);
        if (textFields != null){
            for (JTextField textfield : textFields) { 
                textfield.setEditable(true);
            }
        }
        txtName.setText("");
        txtEmail.setText("");
        txtName.setVisible(true);
        txtEmail.setVisible(true);
        lblName.setVisible(true);
        lblEmail.setVisible(true);
        
        btnCreate.setVisible(true);
        btnUpdate.setVisible(false);
        btnActivation.setVisible(false);
        btnViewDetails.setVisible(false);
        title.setText("Create New Account");
        btnClear.setText("Clear");
        
        //Mask Password
        chkView.setSelected(false);
        txtPassword.setEchoChar('\u25cf');
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccountManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccountManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccountManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccountManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable accountTable;
    private javax.swing.JButton btnActivation;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnViewDetails;
    private javax.swing.JCheckBox chkView;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JRadioButton rbDelivery;
    private javax.swing.JRadioButton rbManaging;
    private javax.swing.ButtonGroup roleGroup;
    private javax.swing.JLabel title;
    private javax.swing.JLabel title1;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtName;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtSearchField;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
